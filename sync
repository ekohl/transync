#!/usr/bin/env python3

import argparse
import json
import os
from pathlib import Path
from typing import Generator, Optional, Tuple

import requests
from transifex.api import transifex_api

LANGUAGES = {
    'es',
    'fr',
    'ja',
    'pt_BR',
    'zh_CN',
}

TRANSIFEX_ORGANIZATION = 'o:foreman'
TRANSIFEX_RESOURCES = {
    # Included in katello
    'bastion_katello',
    # Manual list since they're main projects and not plugins
    'Foreman',
    'hammer-cli',
    # TODO: include as a plugin in foreman-plugin-overview
    'hammer-cli-foreman',
} | {
    # TODO: replace this with foreman-plugin-overview retrieval
    # Needs https://github.com/theforeman/foreman-plugin-overview/pull/6
    # jq -r '.cli[][], .foreman[][] | select(.satellite and .translations) | .translations'
    'foreman_ansible',
    'foreman_azure_rm',
    'foreman_bootdisk',
    'foreman_discovery',
    'foreman_google',
    'foreman_kubevirt',
    'foreman_leapp',
    'foreman_openscap',
    'foreman_puppet',
    'foreman_remote_execution',
    'foreman_rh_cloud',
    'foreman_tasks',
    'foreman_templates',
    'hammer-cli-foreman-puppet',
    'hammer-cli-foreman-remote-execution',
    'hammer-cli-foreman-templates',
    'hammer-cli-foreman-virt-who-configure',
    'hammer-cli-katello',
    'hammer_cli_foreman_ansible',
    'hammer_cli_foreman_azure_rm',
    'hammer_cli_foreman_discovery',
    'hammer_cli_foreman_google',
    'hammer_cli_foreman_kubevirt',
    'hammer_cli_foreman_openscap',
    'hammer_cli_foreman_tasks',
    'katello',
}


class Engine:
    def download(self) -> dict[str, str]:
        raise NotImplementedError()

    def upload(self, translations: dict[str, str]) -> None:
        raise NotImplementedError()

    def store(self, translations) -> None:
        path = Path(self.__class__.__name__.lower())
        path.mkdir(exist_ok=True)
        for filename, text in translations.items():
            file = path / f'{filename}.po'
            file.write_text(text, encoding='utf-8')


class Transifex(Engine):
    def __init__(self, auth: str):
        transifex_api.setup(auth=auth)
        self._client = transifex_api

    def _get_languages(self) -> list[transifex_api.Language]:
        languages = [lang for lang in self._client.Language.all() if lang.code in LANGUAGES]
        missing = LANGUAGES - {language.code for language in languages}
        if missing:
            raise Exception(f'Could not find lanuages: {", ".join(missing)}')
        return languages

    def _get_resources(self) -> list[transifex_api.Resource]:
        project = self._client.Project.get(organization=TRANSIFEX_ORGANIZATION)
        resources = [resource for resource in project.fetch('resources') if resource.name in
                     TRANSIFEX_RESOURCES]
        missing = TRANSIFEX_RESOURCES - {resource.name for resource in resources}
        if missing:
            raise Exception(f'Could not find resources: {", ".join(missing)}')
        return resources


    def _collect_resource_urls(self) \
            -> Generator[Tuple[transifex_api.Resource, transifex_api.Language, str], None, None]:
        languages = self._get_languages()
        for resource in self._get_resources():
            for language in languages:
                url = transifex_api.ResourceTranslationsAsyncDownload.download(resource=resource,
                                                                               language=language)
                yield (resource, language, url)


    def download(self) -> dict[str, str]:
        result = {}

        session = requests.session()

        for resource, language, url in self._collect_resource_urls():
            print('Downloading', resource.name, 'in', language.code)
            filename = f'{resource.slug}__{language.code}'
            result[filename] = session.get(url).text

        return result


    def upload(self, translations: dict[str, str]) -> None:
        # TODO: transifex_api.ResourceTranslationsAsyncUpload.upload(resource, language, content)
        raise NotImplementedError()


class Phrase(Engine):
    BASE_URL = 'https://cloud.memsource.com/web'

    def __init__(self, project_id: str):
        self._session = self._get_phrase_session()
        self.project_id = project_id

    def _get_phrase_session(self) -> requests.Session:
        session = requests.session()
        # TODO: User agent?

        credentials = Path('.phrase')
        if credentials.exists():
            data = json.loads(credentials.read_text('utf-8'))
            # TODO: if now() < data['expires']
            session.headers['Authorization'] = f'ApiToken {data["token"]}'
            return session

        # https://cloud.memsource.com/web/docs/api#operation/login
        url = f'{self.BASE_URL}/api2/v1/auth/login'
        auth = {
            'userName': os.environ['PHRASE_USERNAME'],
            'password': os.environ['PHRASE_PASSWORD'],
        }

        response = session.post(url, json=auth)
        response.raise_for_status()

        data = response.json()
        token = data['token']
        expires = data['expires']

        credentials.write_text(json.dumps({'token': token, 'expires': expires}), 'utf-8')

        session.headers['Authorization'] = f'ApiToken {token}'

        return session

    def upload(self, translations: dict[str, str]) -> None:
        for filename, content in translations.items():
            language = filename.split('__')[-1]

            # TODO: determine if a job already exists and update the source file, else create
            # https://cloud.memsource.com/web/docs/api#operation/createJob
            url = f'{self.BASE_URL}/api2/v1/projects/{self.project_id}/jobs'
            metadata = {
                    'targetLangs': [language],
                }
            headers = {
                'Memsource': json.dumps(metadata),
                'Content-Disposition': f"attachment; filename*=UTF-8''{filename}",
            }

            print(f'Uploading {filename}')
            response = self._session.post(url, headers=headers, data=content)
            if not response.ok:
                print('Failed to upload', filename)
                print(response.status_code)


    def _get_jobs(self) -> list[dict]:
        # https://cloud.memsource.com/web/docs/api#operation/listPartsV2
        url = f'{self.BASE_URL}/api2/v2/projects/{self.project_id}/jobs'

        response = self._session.get(url)
        response.raise_for_status()

        data = response.json()

        jobs = data['content']

        for page in range(1, data['totalPages'] + 1):
            response = self._session.get(url, params={'pageNumber': page})
            response.raise_for_status()

            data = response.json()
            jobs += data['content']

        return jobs

    def download(self) -> dict[str, str]:
        result = {}

        completed = Path('completed')
        completed.mkdir(exist_ok=True)

        for job in self._get_jobs():
            assert job['filename'] and '/' not in job['filename']

            print('Downloading', job['filename'])

            # GET appears undocumented, but returns raw PO file
            url = f"{self.BASE_URL}/api2/v1/projects/{self.project_id}/jobs/{job['uid']}/targetFile"
            response = self._session.get(url)
            response.raise_for_status()

            file = completed / job['filename']
            file.write_text(response.text, 'utf-8')

            result[file.name] = response.text

        return result


class Local(Engine):
    def __init__(self, path: Path):
        self.path = path

    def download(self) -> dict[str, str]:
        return {file.stem: file.read_text() for file in sorted(self.path.glob('*.po'))}

    def upload(self, translations):
        pass # Irrelevant

    def store(self, translations):
        pass # Irrelevant


def process(source: Engine, destination: Optional[Engine]) -> None:
    translations = source.download()

    source.store(translations)

    if destination:
        destination.upload(translations)


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument('--source', help='Where to sync from',
                        choices=('transifex', 'phrase', 'local'), default='local')
    parser.add_argument('--destination', help='Where to sync to',
                        choices=('transifex', 'phrase'))
    parser.add_argument('--local-directory', help='Local directory to store files in',
                        default='files')
    parser.add_argument('--phrase-project-id', help='Phrase project ID')

    parsed = parser.parse_args()

    if parsed.source == parsed.destination:
        parser.exit(1, 'Source and destination must differ\n')

    if 'transifex' in (parsed.source, parsed.destination):
        try:
            transifex_token = os.environ['TRANSIFEX_TOKEN']
        except KeyError:
            parser.exit(1, 'TRANSIFEX_TOKEN must be set environment variable\n')

        transifex = Transifex(transifex_token)

    if 'phrase' in (parsed.source, parsed.destination):
        if not parsed.phrase_project_id:
            parser.exit(1, 'Phrase project ID is mandatory when using Phrase\n')
        try:
            phrase = Phrase(parsed.phrase_project_id)
        except KeyError:
            parser.exit(1, 'PHRASE_USERNAME or PHRASE_PASSWORD not set and environment variables\n')

    if parsed.source == 'transifex':
        source = transifex
    elif parsed.source == 'phrase':
        source = phrase
    elif parsed.source == 'local':
        source = Local(Path(parsed.local_directory))

    if parsed.destination == 'transifex':
        destination = transifex
    elif parsed.destination == 'phrase':
        destination = phrase
    else:
        destination = None

    # Main app
    process(source, destination)


if __name__ == '__main__':
    try:
        main()
    except KeyError:
        pass
